/**
 * Creates the menu item "Format..." for user to run scripts.
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Format...')
      .addItem('Format text', 'formatText')
      .addToUi();
}

/**
 * Formats text to use in BYOP scripts.  Sends email to address specified in setup sheet.
 */
function formatText() {
  const dataCol = 1;
  let ssSettings = SpreadsheetApp.getActiveSpreadsheet();
  let data = ssSettings.getDataRange().getValues();
  let url = data[0][dataCol];
  let infoString = "";
  let email = data[1][dataCol];
  let startedMessage = false;
  if (!isValidEmail(email)) {
    infoString = "Email field not valid; aborting."
    info(infoString);
    return;
  }
  let subject = data[2][dataCol];
  let sheetName = data[3][dataCol];
  let dataStartCol = data[4][dataCol]-1;
  let initialString = "<br><b>INITIAL OUTBOUND MESSAGE:</b><br><br>";
  let questionString = "<br><br><b>QUESTION ANSWERS:</b><ul style=\" margin-bottom: 2px;\">";
  let signoffString = "</ul><b>FINAL SIGNOFF:</b><ul style=\" margin-bottom: 2px;\">";
  let additionalString = "</ul><b>ADDITIONAL RESPONSES:</b><ul style=\" margin-bottom: 2px;\">";
  let htmlBlob = "";

  let ss = SpreadsheetApp.openByUrl(url).getSheetByName(sheetName);
  data = ss.getDataRange().getValues();
  data.forEach((row) => {
    let trimmedString = row[dataStartCol].trim();
    switch (trimmedString) {
      case "MESSAGE":
        startedMessage = true;
        break;
      case "INITIAL OUTBOUND":
        startedMessage = true;
        htmlBlob += initialString + row[dataStartCol+1];
        break;
      case "QUESTION ANSWERS":
        htmlBlob += questionString;
        break;
      case "FINAL SIGNOFF":
        htmlBlob += signoffString;
        break;
      case "ADDITIONAL RESPONSES":
        htmlBlob += additionalString;
        break;
      default:
        if (!startedMessage) {
          htmlBlob += "<b>" + row[0] + "</b><br><br>";
        } else {
          htmlBlob += "<li style=\" margin-bottom: .2in;\"><b>"+row[0]+":</b> "+row[1];
        }
        break;
    }
  });
  htmlBlob += "</ul>"
  try {
    GmailApp.sendEmail(
      email,
      subject,
      "",
      {htmlBody: htmlBlob,
        // bcc: bccEmail,
        // cc: ccEmail,
        // from: 'info@vopropros.com',
        // name: 'VoPro Pros',
        // replyTo: 'info@vopropros.com',
        // noReply: true, // if the email should be sent from a generic no-reply email address (not available to gmail.com users)
        // attachments: emailTemplate.attachments,
        // inlineImages: emailTemplate.inlineImages
      }
    );
    infoString = "Message sent to " + email;
    info(infoString);
    console.log("Message sent to %s", email);
  } catch (e) {
    Logger.log("Failed to send email: " + e);
    info("Failed to send email");
  }
  // let htmltemplate = HtmlService.createHtmlOutput(htmlBlob);
}

/**
 * Small wrapper for toast() call to spreadsheet.
 * @param {String} text
 */
function info(text) {
  SpreadsheetApp.getActiveSpreadsheet().toast(text, "Info"); 
}

function isValidEmail(email) {
  var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
}
